/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  SignUpInput: { // input type
    bio: string; // String!
    email: string; // String!
    name: string; // String!
    password: string; // String!
    username: string; // String!
  }
}

export interface NexusGenEnums {
  Role: "admin" | "user"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Comment: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    postId: string; // String!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Like: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    postId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Mutation: {};
  Post: { // root type
    commentsCount?: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    image?: string | null; // String
    likesCount?: number | null; // Int
    location?: string | null; // String
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Query: {};
  User: { // root type
    bio: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    image: string; // String!
    name: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Comment: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: string; // String!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  Like: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  Mutation: { // field return type
    deleteComment: string | null; // String
    deletePost: string | null; // String
    likePost: NexusGenRootTypes['Like'] | null; // Like
    signUp: NexusGenRootTypes['User'] | null; // User
    submitComment: string | null; // String
    submitPost: NexusGenRootTypes['Post'] | null; // Post
    unlikePost: string | null; // String
  }
  Post: { // field return type
    commentsCount: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    image: string | null; // String
    likesCount: number | null; // Int
    location: string | null; // String
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  Query: { // field return type
    isUsernameAvailable: boolean; // Boolean!
    posts: NexusGenRootTypes['Post'][] | null; // [Post!]
    users: NexusGenRootTypes['User'][] | null; // [User!]
  }
  User: { // field return type
    bio: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    image: string; // String!
    name: string; // String!
    role: NexusGenEnums['Role']; // Role!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Comment: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    post: 'Post'
    postId: 'String'
    text: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Like: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    post: 'Post'
    postId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Mutation: { // field return type name
    deleteComment: 'String'
    deletePost: 'String'
    likePost: 'Like'
    signUp: 'User'
    submitComment: 'String'
    submitPost: 'Post'
    unlikePost: 'String'
  }
  Post: { // field return type name
    commentsCount: 'Int'
    createdAt: 'DateTime'
    id: 'ID'
    image: 'String'
    likesCount: 'Int'
    location: 'String'
    text: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Query: { // field return type name
    isUsernameAvailable: 'Boolean'
    posts: 'Post'
    users: 'User'
  }
  User: { // field return type name
    bio: 'String'
    createdAt: 'DateTime'
    email: 'String'
    id: 'ID'
    image: 'String'
    name: 'String'
    role: 'Role'
    updatedAt: 'DateTime'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteComment: { // args
      commentId: string; // String!
      postId: string; // String!
    }
    deletePost: { // args
      postId: string; // String!
    }
    likePost: { // args
      postId: string; // String!
    }
    signUp: { // args
      image?: string | null; // String
      user: NexusGenInputs['SignUpInput']; // SignUpInput!
    }
    submitComment: { // args
      postId: string; // String!
      text: string; // String!
    }
    submitPost: { // args
      image?: string | null; // String
      location?: string | null; // String
      text: string; // String!
    }
    unlikePost: { // args
      likeId: string; // String!
      postId: string; // String!
    }
  }
  Query: {
    isUsernameAvailable: { // args
      username: string; // String!
    }
    posts: { // args
      pageNumber: number; // Int!
    }
    users: { // args
      name: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}